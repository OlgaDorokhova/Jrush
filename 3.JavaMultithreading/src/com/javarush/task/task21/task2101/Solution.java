package com.javarush.task.task21.task2101;

/* 
Определяем адрес сети
*/

public class Solution {
    public static void main(String[] args) {
        byte[] ip = new byte[]{(byte) 192, (byte) 168, 1, 2};
        byte[] mask = new byte[]{(byte) 255, (byte) 255, (byte) 254, 0};
        byte[] netAddress = getNetAddress(ip, mask);
        print(ip);          //11000000 10101000 00000001 00000010
        System.out.println(" ");
        print(mask);        //11111111 11111111 11111110 00000000
        System.out.println(" ");
        print(netAddress);  //11000000 10101000 00000000 00000000
    }

    public static byte[] getNetAddress(byte[] ip, byte[] mask) {

        byte[] result = new byte[4];
        for (int i = 0; i < ip.length; i++) {

            result[i] =  (byte)((ip[i] & 0xFF)  & (mask[i] & 0xFF));
        }
        return result;
    }

    public static void print(byte[] bytes) {
        for (int i = 0; i < bytes.length; i++) {
            System.out.println(String.format("%8s", Integer.toBinaryString(bytes[i] & 0xFF)).replace(" ", "0"));
        }
    }

//    Чтобы проще было понять происходящее, надо разбить длинную строку
//
//String.format("%8s", Integer.toBinaryString(b & 0xFF)).replace(" ", "0");
//    на отдельные операции. Прежде всего выясним для чего нужно b & 0xFF.
//
//    В Java переменная типа byte в старшем разряде хранит знак.
//    При передаче в метод toBinaryString происходит неявное приведение 8-битного байта к 32-битному целому.
//    При этом старшие разряды отрицательного числа "добиваются" установленными битами и 10000001 превращается в 11111111 11111111 11111111 10000001.
//    Что искажает ожидаемый нами результат. Нам надо как-то обнулить старшие биты. Бинарное представление 0xFF - это 00000000 00000000 00000000 11111111.
//    Применяя операцию побитового И, мы обнуляем биты старших разрядов и получаем требуемое нам 00000000 00000000 00000000 10000001.
//
//    Далее метод Integer.toBinaryString() превращает переденное ему целое числов в строку содержащую нули и единицы.
//    Ведущие нули он отбрасывает. С одной стороны, благодаря этому мы получаем интересующее нас 8-битное представление,
//    а с другой, 00000001 он превратит в несуразное 1.
//
//    Решить эту проблему нам поможет String.format(). Метод String.format() в соответствии со спецификтором формата %8s выравнивает строку так,
//    чтобы она занимала не менее 8 символов. Беда в том, что для спецификатора строки s выравнивание производится пробелами.
//
//    Вот для чего нам нужен последний вызов в строке. Метод .replace(" ", "0") заменяет пробелы нулями.
//
//            Хотя, я бы предпочёл использовать такой метод форматирования:
//
//            for (byte b : bytes) {
//        String binStr = Integer.toBinaryString(b & 0xFF);
//        System.out.print(("00000000" + binStr + " ").substring(binStr.length()));
//    }
}
